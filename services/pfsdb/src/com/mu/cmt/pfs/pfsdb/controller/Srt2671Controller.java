/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.mu.cmt.pfs.pfsdb.Srt2671;
import com.mu.cmt.pfs.pfsdb.Srt2671Id;
import com.mu.cmt.pfs.pfsdb.service.Srt2671Service;


/**
 * Controller object for domain model class Srt2671.
 * @see Srt2671
 */
@RestController("pfsdb.Srt2671Controller")
@Api(value = "Srt2671Controller", description = "Exposes APIs to work with Srt2671 resource.")
@RequestMapping("/pfsdb/Srt2671")
public class Srt2671Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Srt2671Controller.class);

    @Autowired
	@Qualifier("pfsdb.Srt2671Service")
	private Srt2671Service srt2671Service;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Srt2671 instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Srt2671 createSrt2671(@RequestPart("wm_data_json") Srt2671 srt2671, @RequestPart(value = "patternfile", required = false) MultipartFile _patternfile) {
		LOGGER.debug("Create Srt2671 with information: {}" , srt2671);

    srt2671.setPatternfile(WMMultipartUtils.toByteArray(_patternfile));
		srt2671 = srt2671Service.create(srt2671);
		LOGGER.debug("Created Srt2671 with information: {}" , srt2671);

	    return srt2671;
	}

    @ApiOperation(value = "Returns the Srt2671 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Srt2671 getSrt2671(@RequestParam("versionno") Byte versionno, @RequestParam("pattypecode") String pattypecode, @RequestParam("lectracode") String lectracode, @RequestParam("gmtseq") String gmtseq) {

        Srt2671Id srt2671Id = new Srt2671Id();
        srt2671Id.setVersionno(versionno);
        srt2671Id.setPattypecode(pattypecode);
        srt2671Id.setLectracode(lectracode);
        srt2671Id.setGmtseq(gmtseq);

        LOGGER.debug("Getting Srt2671 with id: {}" , srt2671Id);
        Srt2671 srt2671 = srt2671Service.getById(srt2671Id);
        LOGGER.debug("Srt2671 details with id: {}" , srt2671);

        return srt2671;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in Srt2671 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id/content/{fieldName}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public void getSrt2671BLOBContent(@RequestParam("versionno") Byte versionno, @RequestParam("pattypecode") String pattypecode, @RequestParam("lectracode") String lectracode, @RequestParam("gmtseq") String gmtseq, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in Srt2671 instance" , fieldName);

        if(!WMRuntimeUtils.isLob(Srt2671.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName +  " is not a valid BLOB type");
        }

        Srt2671Id srt2671Id = new Srt2671Id();
        srt2671Id.setVersionno(versionno);
        srt2671Id.setPattypecode(pattypecode);
        srt2671Id.setLectracode(lectracode);
        srt2671Id.setGmtseq(gmtseq);

        Srt2671 srt2671 = srt2671Service.getById(srt2671Id);
        WMMultipartUtils.buildHttpResponseForBlob(srt2671, fieldName, httpServletRequest, httpServletResponse);
    }



    @ApiOperation(value = "Updates the Srt2671 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Srt2671 editSrt2671(@RequestParam("versionno") Byte versionno, @RequestParam("pattypecode") String pattypecode, @RequestParam("lectracode") String lectracode, @RequestParam("gmtseq") String gmtseq, @RequestBody Srt2671 srt2671) {

        srt2671.setVersionno(versionno);
        srt2671.setPattypecode(pattypecode);
        srt2671.setLectracode(lectracode);
        srt2671.setGmtseq(gmtseq);

        LOGGER.debug("Srt2671 details with id is updated with: {}" , srt2671);

        return srt2671Service.update(srt2671);
    }

    @ApiOperation(value = "Updates the Srt2671 instance associated with the given composite-id.This API should be used when Srt2671 instance fields that require multipart data.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Srt2671 editSrt2671(@RequestParam("versionno") Byte versionno, @RequestParam("pattypecode") String pattypecode, @RequestParam("lectracode") String lectracode, @RequestParam("gmtseq") String gmtseq, MultipartHttpServletRequest multipartHttpServletRequest) {
        return this.editSrt2671AndMultiparts(versionno, pattypecode, lectracode, gmtseq, multipartHttpServletRequest);
    }

    @ApiOperation(value = "Updates the Srt2671 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT,  consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Srt2671 editSrt2671AndMultiparts(@RequestParam("versionno") Byte versionno, @RequestParam("pattypecode") String pattypecode, @RequestParam("lectracode") String lectracode, @RequestParam("gmtseq") String gmtseq, MultipartHttpServletRequest multipartHttpServletRequest) { 

        Srt2671Id srt2671Id = new Srt2671Id();
        srt2671Id.setVersionno(versionno);
        srt2671Id.setPattypecode(pattypecode);
        srt2671Id.setLectracode(lectracode);
        srt2671Id.setGmtseq(gmtseq);

        Srt2671 newSrt2671 = WMMultipartUtils.toObject(multipartHttpServletRequest, Srt2671.class, "pfsdb");
        Srt2671 oldSrt2671 = srt2671Service.getById(srt2671Id);

        WMMultipartUtils.updateLobsContent(oldSrt2671, newSrt2671);

        newSrt2671.setVersionno(versionno);
        newSrt2671.setPattypecode(pattypecode);
        newSrt2671.setLectracode(lectracode);
        newSrt2671.setGmtseq(gmtseq);

        LOGGER.debug("Srt2671 details with id is updated with: {}" , newSrt2671);

        return srt2671Service.update(newSrt2671);
    }


    @ApiOperation(value = "Deletes the Srt2671 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSrt2671(@RequestParam("versionno") Byte versionno, @RequestParam("pattypecode") String pattypecode, @RequestParam("lectracode") String lectracode, @RequestParam("gmtseq") String gmtseq) {

        Srt2671Id srt2671Id = new Srt2671Id();
        srt2671Id.setVersionno(versionno);
        srt2671Id.setPattypecode(pattypecode);
        srt2671Id.setLectracode(lectracode);
        srt2671Id.setGmtseq(gmtseq);

        LOGGER.debug("Deleting Srt2671 with id: {}" , srt2671Id);
        Srt2671 srt2671 = srt2671Service.delete(srt2671Id);

        return srt2671 != null;
    }


    /**
     * @deprecated Use {@link #findSrt2671s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Srt2671 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Srt2671> searchSrt2671sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Srt2671s list by query filter:{}", (Object) queryFilters);
        return srt2671Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Srt2671 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Srt2671> findSrt2671s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Srt2671s list by filter:", query);
        return srt2671Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Srt2671 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Srt2671> filterSrt2671s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Srt2671s list by filter", query);
        return srt2671Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSrt2671s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return srt2671Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSrt2671sAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Srt2671.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> srt2671Service.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Srt2671 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSrt2671s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Srt2671s");
		return srt2671Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSrt2671AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return srt2671Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Srt2671Service instance
	 */
	protected void setSrt2671Service(Srt2671Service service) {
		this.srt2671Service = service;
	}

}