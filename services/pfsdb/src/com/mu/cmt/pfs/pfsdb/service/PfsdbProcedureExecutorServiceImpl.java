/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.sql.Date;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.procedure.WMProcedureExecutor;
import com.wavemaker.runtime.data.exception.BlobContentNotFoundException;

import com.mu.cmt.pfs.pfsdb.models.procedure.*;

@Service
public class PfsdbProcedureExecutorServiceImpl implements PfsdbProcedureExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PfsdbProcedureExecutorServiceImpl.class);

    @Autowired
    @Qualifier("pfsdbWMProcedureExecutor")
    private WMProcedureExecutor procedureExecutor;

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Tt640pk0GetMakeupUnitResponse executeTT640pk0_getMakeupUnit() {
        Map<String, Object> params = new HashMap<>(1);


        return procedureExecutor.executeNamedProcedure("TT640pk0_getMakeupUnit", params, Tt640pk0GetMakeupUnitResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Sy2110pk0getCroquisPathResponse executeSY2110PK0GetCroquisPath(String pordnum, String pdsheetno) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("pOrdnum", pordnum);
        params.put("pDsheetno", pdsheetno);

        return procedureExecutor.executeNamedProcedure("SY2110PK0GetCroquisPath", params, Sy2110pk0getCroquisPathResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcMk1100pk0Mk440getordLoadunldqtyResponse executeProcMK1100PK0_MK440GetordLoadunldqty(String pprgid, String pordnum, String pgmtseq, Integer pclrseqg) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("pPrgid", pprgid);
        params.put("pOrdnum", pordnum);
        params.put("pGmtseq", pgmtseq);
        params.put("pClrseqg", pclrseqg);

        return procedureExecutor.executeNamedProcedure("procMK1100PK0_MK440GetordLoadunldqty", params, ProcMk1100pk0Mk440getordLoadunldqtyResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Mk1100pk0getMenuItemsResponse executeMk1100pk0GetMenuItems(String pordnum, String pmenuModule) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("pOrdnum", pordnum);
        params.put("pMenuModule", pmenuModule);

        return procedureExecutor.executeNamedProcedure("mk1100pk0GetMenuItems", params, Mk1100pk0getMenuItemsResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcMk1100pk0GetGmtColourDetailsResponse executeProcMK1100PK0_GetGmtColourDetails(String pprgid, String pordnum, String pgmtseq, Integer pclrseqg) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("pPrgid", pprgid);
        params.put("pOrdnum", pordnum);
        params.put("pGmtseq", pgmtseq);
        params.put("pClrseqg", pclrseqg);

        return procedureExecutor.executeNamedProcedure("procMK1100PK0_GetGmtColourDetails", params, ProcMk1100pk0GetGmtColourDetailsResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcMk1100pk0Mk440getjobLoadunldqtyResponse executeProcMK1100PK0_MK440GetjobLoadunldqty(String pprgid, String pordnum, String pgmtseq, Integer pclrseqg, Integer pszeseq) {
        Map<String, Object> params = new HashMap<>(6);

        params.put("pPrgid", pprgid);
        params.put("pOrdnum", pordnum);
        params.put("pGmtseq", pgmtseq);
        params.put("pClrseqg", pclrseqg);
        params.put("pSzeseq", pszeseq);

        return procedureExecutor.executeNamedProcedure("procMK1100PK0_MK440GetjobLoadunldqty", params, ProcMk1100pk0Mk440getjobLoadunldqtyResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public QrySy006pk0callRepUrlResponse executeQrySY006pk0CallRepUrl(String preportPath, String pparams, String pdesformat, String pparamForm) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("pReportPath", preportPath);
        params.put("pParams", pparams);
        params.put("pDesformat", pdesformat);
        params.put("pParamForm", pparamForm);

        return procedureExecutor.executeNamedProcedure("qrySY006pk0CallRepUrl", params, QrySy006pk0callRepUrlResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcMk1100pk0Mk570getOrdDetailsResponse executeProcMK1100PK0_MK570GetOrdDetails(String pprgid, String pordnum) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("pPrgid", pprgid);
        params.put("pOrdnum", pordnum);

        return procedureExecutor.executeNamedProcedure("procMK1100PK0_MK570GetOrdDetails", params, ProcMk1100pk0Mk570getOrdDetailsResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcMk1100pk0Mk570getProdDetailsResponse executeProcMK1100PK0_MK570GetProdDetails(String pprgid, String pordnum) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("pPrgid", pprgid);
        params.put("pOrdnum", pordnum);

        return procedureExecutor.executeNamedProcedure("procMK1100PK0_MK570GetProdDetails", params, ProcMk1100pk0Mk570getProdDetailsResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Mk1100pk0getOrderDocsUrlResponse executeMk1100pk0GetOrderDocsUrl(String pprgid, String pordnum, String pdsheetno) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("pPrgid", pprgid);
        params.put("pOrdnum", pordnum);
        params.put("pDsheetno", pdsheetno);

        return procedureExecutor.executeNamedProcedure("mk1100pk0GetOrderDocsUrl", params, Mk1100pk0getOrderDocsUrlResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcMk1100pk0GetOrt150sizeResponse executeProcMK1100PK0_GetOrt150Size(String pprgid, String pordnum) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("pPrgid", pprgid);
        params.put("pOrdnum", pordnum);

        return procedureExecutor.executeNamedProcedure("procMK1100PK0_GetOrt150Size", params, ProcMk1100pk0GetOrt150sizeResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcMk1100pk0Mk450jobUnloadperszeResponse executeProcMK1100PK0_MK450JobUnloadpersze(String pprgid, String pordnum, String pgmtseq, Integer pclrseqg) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("pPrgid", pprgid);
        params.put("pOrdnum", pordnum);
        params.put("pGmtseq", pgmtseq);
        params.put("pClrseqg", pclrseqg);

        return procedureExecutor.executeNamedProcedure("procMK1100PK0_MK450JobUnloadpersze", params, ProcMk1100pk0Mk450jobUnloadperszeResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcMk1100pk0QryMk721prodminsResponse executeProcMK1100PK0_QryMK721Prodmins(String pprgid, String pordnum, String pmaklcn, Date pproddate) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("pPrgid", pprgid);
        params.put("pOrdnum", pordnum);
        params.put("pMaklcn", pmaklcn);
        params.put("pProddate", pproddate);

        return procedureExecutor.executeNamedProcedure("procMK1100PK0_QryMK721Prodmins", params, ProcMk1100pk0QryMk721prodminsResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public InputStream executeSR2675PK0GetOrderPattern(String pordnum, String poutFilename, String poutMessage, String pprgid, String pgmtseq) {
        Map<String, Object> params = new HashMap<>(6);

        params.put("pOrdnum", pordnum);
        params.put("poutFilename", poutFilename);
        params.put("poutMessage", poutMessage);
        params.put("pPrgid", pprgid);
        params.put("pGmtseq", pgmtseq);

        Sr2675pk0getOrderPatternResponse _result =  procedureExecutor.executeNamedProcedure("SR2675PK0GetOrderPattern", params, Sr2675pk0getOrderPatternResponse.class);
        if(_result.getPoutPatternfile() == null) {
            LOGGER.debug("Blob content not exists for poutPatternfile in procedure SR2675PK0GetOrderPattern");
            throw new BlobContentNotFoundException("Blob content not found for poutPatternfile in procedure SR2675PK0GetOrderPattern");
        }
        return new ByteArrayInputStream(_result.getPoutPatternfile());
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcMk103pk0ordqryGetOrdcommentResponse executeProcMK103PK0ORDQRY_GetOrdcomment(String pprgid, String pordnum) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("pPrgid", pprgid);
        params.put("pOrdnum", pordnum);

        return procedureExecutor.executeNamedProcedure("procMK103PK0ORDQRY_GetOrdcomment", params, ProcMk103pk0ordqryGetOrdcommentResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcMk1100pk0Mk400jobLoadperszeResponse executeProcMK1100PK0_MK400JobLoadpersze(String pprgid, String pordnum, String pgmtseq, Integer pclrseqg) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("pPrgid", pprgid);
        params.put("pOrdnum", pordnum);
        params.put("pGmtseq", pgmtseq);
        params.put("pClrseqg", pclrseqg);

        return procedureExecutor.executeNamedProcedure("procMK1100PK0_MK400JobLoadpersze", params, ProcMk1100pk0Mk400jobLoadperszeResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Sr2680pk0checkBeforeDwnldPatternResponse executeSR2680PK0CheckBeforeDwnldPattern(String pordnum, String pgmtseq, String pprgid) {
        Map<String, Object> params = new HashMap<>(8);

        params.put("pOrdnum", pordnum);
        params.put("pGmtseq", pgmtseq);
        params.put("pPrgid", pprgid);

        return procedureExecutor.executeNamedProcedure("SR2680PK0CheckBeforeDwnldPattern", params, Sr2680pk0checkBeforeDwnldPatternResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public InputStream executeProcMK103PK0QRYORD_GetOrdgmtImage(String pprgid, String pordnum, String pgmtseq) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("pPrgid", pprgid);
        params.put("pOrdnum", pordnum);
        params.put("pGmtseq", pgmtseq);

        ProcMk103pk0qryordGetOrdgmtImageResponse _result =  procedureExecutor.executeNamedProcedure("procMK103PK0QRYORD_GetOrdgmtImage", params, ProcMk103pk0qryordGetOrdgmtImageResponse.class);
        if(_result.getPoutImage() == null) {
            LOGGER.debug("Blob content not exists for poutImage in procedure procMK103PK0QRYORD_GetOrdgmtImage");
            throw new BlobContentNotFoundException("Blob content not found for poutImage in procedure procMK103PK0QRYORD_GetOrdgmtImage");
        }
        return new ByteArrayInputStream(_result.getPoutImage());
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcMk1100pk0GetMkupAuditResponse executeProcMK1100PK0_GetMkupAudit(String pprgid, String pordnum, String pdyejob, Date popdateFrom, Date popdateTo) {
        Map<String, Object> params = new HashMap<>(6);

        params.put("pPrgid", pprgid);
        params.put("pOrdnum", pordnum);
        params.put("pDyejob", pdyejob);
        params.put("pOpdateFrom", popdateFrom);
        params.put("pOpdateTo", popdateTo);

        return procedureExecutor.executeNamedProcedure("procMK1100PK0_GetMkupAudit", params, ProcMk1100pk0GetMkupAuditResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcMk1100pk0Mk560qryMkrejectsResponse executeProcMK1100PK0_MK560QryMkrejects(String pprgid, String pordnum, String pgmtseq, Integer pclrseqg) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("pPrgid", pprgid);
        params.put("pOrdnum", pordnum);
        params.put("pGmtseq", pgmtseq);
        params.put("pClrseqg", pclrseqg);

        return procedureExecutor.executeNamedProcedure("procMK1100PK0_MK560QryMkrejects", params, ProcMk1100pk0Mk560qryMkrejectsResponse.class);
    }

}