/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mu.cmt.pfs.pfsdb.Srt2671;
import com.mu.cmt.pfs.pfsdb.Srt2671Id;


/**
 * ServiceImpl object for domain model class Srt2671.
 *
 * @see Srt2671
 */
@Service("pfsdb.Srt2671Service")
@Validated
public class Srt2671ServiceImpl implements Srt2671Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Srt2671ServiceImpl.class);


    @Autowired
    @Qualifier("pfsdb.Srt2671Dao")
    private WMGenericDao<Srt2671, Srt2671Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Srt2671, Srt2671Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Srt2671 create(Srt2671 srt2671) {
        LOGGER.debug("Creating a new Srt2671 with information: {}", srt2671);

        Srt2671 srt2671Created = this.wmGenericDao.create(srt2671);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(srt2671Created);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Srt2671 getById(Srt2671Id srt2671Id) {
        LOGGER.debug("Finding Srt2671 by id: {}", srt2671Id);
        return this.wmGenericDao.findById(srt2671Id);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Srt2671 findById(Srt2671Id srt2671Id) {
        LOGGER.debug("Finding Srt2671 by id: {}", srt2671Id);
        try {
            return this.wmGenericDao.findById(srt2671Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Srt2671 found with id: {}", srt2671Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public List<Srt2671> findByMultipleIds(List<Srt2671Id> srt2671Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Srt2671s by ids: {}", srt2671Ids);

        return this.wmGenericDao.findByMultipleIds(srt2671Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "pfsdbTransactionManager")
    @Override
    public Srt2671 update(Srt2671 srt2671) {
        LOGGER.debug("Updating Srt2671 with information: {}", srt2671);

        this.wmGenericDao.update(srt2671);
        this.wmGenericDao.refresh(srt2671);

        return srt2671;
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Srt2671 delete(Srt2671Id srt2671Id) {
        LOGGER.debug("Deleting Srt2671 with id: {}", srt2671Id);
        Srt2671 deleted = this.wmGenericDao.findById(srt2671Id);
        if (deleted == null) {
            LOGGER.debug("No Srt2671 found with id: {}", srt2671Id);
            throw new EntityNotFoundException(String.valueOf(srt2671Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public void delete(Srt2671 srt2671) {
        LOGGER.debug("Deleting Srt2671 with {}", srt2671);
        this.wmGenericDao.delete(srt2671);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Page<Srt2671> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Srt2671s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Page<Srt2671> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Srt2671s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service pfsdb for table Srt2671 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service pfsdb for table Srt2671 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}