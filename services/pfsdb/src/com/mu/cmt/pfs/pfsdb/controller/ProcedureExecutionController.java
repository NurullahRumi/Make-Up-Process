/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.InputStream;
import java.sql.Date;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.mu.cmt.pfs.pfsdb.service.PfsdbProcedureExecutorService;
import com.mu.cmt.pfs.pfsdb.models.procedure.*;

@RestController(value = "Pfsdb.ProcedureExecutionController")
@RequestMapping("/pfsdb/procedureExecutor")
@Api(value = "ProcedureExecutionController", description = "controller class for procedure execution")
public class ProcedureExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProcedureExecutionController.class);

    @Autowired
    private PfsdbProcedureExecutorService procedureService;

    @RequestMapping(value = "/procedure/execute/TT640pk0_getMakeupUnit", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get make up unit")
    public Tt640pk0GetMakeupUnitResponse executeTT640pk0_getMakeupUnit(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: TT640pk0_getMakeupUnit");
        Tt640pk0GetMakeupUnitResponse _result = procedureService.executeTT640pk0_getMakeupUnit();
        LOGGER.debug("got the result for named procedure: TT640pk0_getMakeupUnit, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/SY2110PK0GetCroquisPath", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get croquis path")
    public Sy2110pk0getCroquisPathResponse executeSY2110PK0GetCroquisPath(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pDsheetno", required = false) String pdsheetno, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: SY2110PK0GetCroquisPath");
        Sy2110pk0getCroquisPathResponse _result = procedureService.executeSY2110PK0GetCroquisPath(pordnum, pdsheetno);
        LOGGER.debug("got the result for named procedure: SY2110PK0GetCroquisPath, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procMK1100PK0_MK440GetordLoadunldqty", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Load- unload qty for an order, gmtseq, gmt clr")
    public ProcMk1100pk0Mk440getordLoadunldqtyResponse executeProcMK1100PK0_MK440GetordLoadunldqty(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pOrdnum") String pordnum, @RequestParam(value = "pGmtseq", required = false) String pgmtseq, @RequestParam(value = "pClrseqg", required = false) Integer pclrseqg, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procMK1100PK0_MK440GetordLoadunldqty");
        ProcMk1100pk0Mk440getordLoadunldqtyResponse _result = procedureService.executeProcMK1100PK0_MK440GetordLoadunldqty(pprgid, pordnum, pgmtseq, pclrseqg);
        LOGGER.debug("got the result for named procedure: procMK1100PK0_MK440GetordLoadunldqty, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/mk1100pk0GetMenuItems", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get program urls for menu")
    public Mk1100pk0getMenuItemsResponse executeMk1100pk0GetMenuItems(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pMenuModule", required = false) String pmenuModule, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: mk1100pk0GetMenuItems");
        Mk1100pk0getMenuItemsResponse _result = procedureService.executeMk1100pk0GetMenuItems(pordnum, pmenuModule);
        LOGGER.debug("got the result for named procedure: mk1100pk0GetMenuItems, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procMK1100PK0_GetGmtColourDetails", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Garment Color Details")
    public ProcMk1100pk0GetGmtColourDetailsResponse executeProcMK1100PK0_GetGmtColourDetails(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pGmtseq", required = false) String pgmtseq, @RequestParam(value = "pClrseqg", required = false) Integer pclrseqg, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procMK1100PK0_GetGmtColourDetails");
        ProcMk1100pk0GetGmtColourDetailsResponse _result = procedureService.executeProcMK1100PK0_GetGmtColourDetails(pprgid, pordnum, pgmtseq, pclrseqg);
        LOGGER.debug("got the result for named procedure: procMK1100PK0_GetGmtColourDetails, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procMK1100PK0_MK440GetjobLoadunldqty", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get job Load unld qty")
    public ProcMk1100pk0Mk440getjobLoadunldqtyResponse executeProcMK1100PK0_MK440GetjobLoadunldqty(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pGmtseq", required = false) String pgmtseq, @RequestParam(value = "pClrseqg", required = false) Integer pclrseqg, @RequestParam(value = "pSzeseq", required = false) Integer pszeseq, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procMK1100PK0_MK440GetjobLoadunldqty");
        ProcMk1100pk0Mk440getjobLoadunldqtyResponse _result = procedureService.executeProcMK1100PK0_MK440GetjobLoadunldqty(pprgid, pordnum, pgmtseq, pclrseqg, pszeseq);
        LOGGER.debug("got the result for named procedure: procMK1100PK0_MK440GetjobLoadunldqty, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/qrySY006pk0CallRepUrl", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "call report URL")
    public QrySy006pk0callRepUrlResponse executeQrySY006pk0CallRepUrl(@RequestParam(value = "pReportPath", required = false) String preportPath, @RequestParam(value = "pParams", required = false) String pparams, @RequestParam(value = "pDesformat", required = false) String pdesformat, @RequestParam(value = "pParamForm", required = false) String pparamForm, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: qrySY006pk0CallRepUrl");
        QrySy006pk0callRepUrlResponse _result = procedureService.executeQrySY006pk0CallRepUrl(preportPath, pparams, pdesformat, pparamForm);
        LOGGER.debug("got the result for named procedure: qrySY006pk0CallRepUrl, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procMK1100PK0_MK570GetOrdDetails", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get order details for MK570")
    public ProcMk1100pk0Mk570getOrdDetailsResponse executeProcMK1100PK0_MK570GetOrdDetails(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pOrdnum", required = false) String pordnum, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procMK1100PK0_MK570GetOrdDetails");
        ProcMk1100pk0Mk570getOrdDetailsResponse _result = procedureService.executeProcMK1100PK0_MK570GetOrdDetails(pprgid, pordnum);
        LOGGER.debug("got the result for named procedure: procMK1100PK0_MK570GetOrdDetails, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procMK1100PK0_MK570GetProdDetails", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get MK570 Prod Details")
    public ProcMk1100pk0Mk570getProdDetailsResponse executeProcMK1100PK0_MK570GetProdDetails(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pOrdnum", required = false) String pordnum, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procMK1100PK0_MK570GetProdDetails");
        ProcMk1100pk0Mk570getProdDetailsResponse _result = procedureService.executeProcMK1100PK0_MK570GetProdDetails(pprgid, pordnum);
        LOGGER.debug("got the result for named procedure: procMK1100PK0_MK570GetProdDetails, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/mk1100pk0GetOrderDocsUrl", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get Order Docs URL")
    public Mk1100pk0getOrderDocsUrlResponse executeMk1100pk0GetOrderDocsUrl(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pDsheetno", required = false) String pdsheetno, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: mk1100pk0GetOrderDocsUrl");
        Mk1100pk0getOrderDocsUrlResponse _result = procedureService.executeMk1100pk0GetOrderDocsUrl(pprgid, pordnum, pdsheetno);
        LOGGER.debug("got the result for named procedure: mk1100pk0GetOrderDocsUrl, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procMK1100PK0_GetOrt150Size", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Ort150 Size")
    public ProcMk1100pk0GetOrt150sizeResponse executeProcMK1100PK0_GetOrt150Size(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pOrdnum", required = false) String pordnum, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procMK1100PK0_GetOrt150Size");
        ProcMk1100pk0GetOrt150sizeResponse _result = procedureService.executeProcMK1100PK0_GetOrt150Size(pprgid, pordnum);
        LOGGER.debug("got the result for named procedure: procMK1100PK0_GetOrt150Size, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procMK1100PK0_MK450JobUnloadpersze", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get MK450 Job Unload per sze")
    public ProcMk1100pk0Mk450jobUnloadperszeResponse executeProcMK1100PK0_MK450JobUnloadpersze(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pGmtseq", required = false) String pgmtseq, @RequestParam(value = "pClrseqg", required = false) Integer pclrseqg, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procMK1100PK0_MK450JobUnloadpersze");
        ProcMk1100pk0Mk450jobUnloadperszeResponse _result = procedureService.executeProcMK1100PK0_MK450JobUnloadpersze(pprgid, pordnum, pgmtseq, pclrseqg);
        LOGGER.debug("got the result for named procedure: procMK1100PK0_MK450JobUnloadpersze, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procMK1100PK0_QryMK721Prodmins", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get MK721 Production Mins")
    public ProcMk1100pk0QryMk721prodminsResponse executeProcMK1100PK0_QryMK721Prodmins(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pMaklcn", required = false) String pmaklcn, @RequestParam(value = "pProddate", required = false) Date pproddate, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procMK1100PK0_QryMK721Prodmins");
        ProcMk1100pk0QryMk721prodminsResponse _result = procedureService.executeProcMK1100PK0_QryMK721Prodmins(pprgid, pordnum, pmaklcn, pproddate);
        LOGGER.debug("got the result for named procedure: procMK1100PK0_QryMK721Prodmins, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/SR2675PK0GetOrderPattern", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get order pattern")
    public Downloadable executeSR2675PK0GetOrderPattern(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "poutFilename", required = false) String poutFilename, @RequestParam(value = "poutMessage", required = false) String poutMessage, @RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pGmtseq", required = false) String pgmtseq, @RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: SR2675PK0GetOrderPattern");
        InputStream _result = procedureService.executeSR2675PK0GetOrderPattern(pordnum, poutFilename, poutMessage, pprgid, pgmtseq);
        LOGGER.debug("got the result for named procedure: SR2675PK0GetOrderPattern, result:{}", _result);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @RequestMapping(value = "/procedure/execute/procMK103PK0ORDQRY_GetOrdcomment", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "procMK103PK0ORDQRY_GetOrdcomment")
    public ProcMk103pk0ordqryGetOrdcommentResponse executeProcMK103PK0ORDQRY_GetOrdcomment(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pOrdnum", required = false) String pordnum, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procMK103PK0ORDQRY_GetOrdcomment");
        ProcMk103pk0ordqryGetOrdcommentResponse _result = procedureService.executeProcMK103PK0ORDQRY_GetOrdcomment(pprgid, pordnum);
        LOGGER.debug("got the result for named procedure: procMK103PK0ORDQRY_GetOrdcomment, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procMK1100PK0_MK400JobLoadpersze", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get MK400 Job Load Per Sze")
    public ProcMk1100pk0Mk400jobLoadperszeResponse executeProcMK1100PK0_MK400JobLoadpersze(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pGmtseq", required = false) String pgmtseq, @RequestParam(value = "pClrseqg", required = false) Integer pclrseqg, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procMK1100PK0_MK400JobLoadpersze");
        ProcMk1100pk0Mk400jobLoadperszeResponse _result = procedureService.executeProcMK1100PK0_MK400JobLoadpersze(pprgid, pordnum, pgmtseq, pclrseqg);
        LOGGER.debug("got the result for named procedure: procMK1100PK0_MK400JobLoadpersze, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/SR2680PK0CheckBeforeDwnldPattern", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "check before download pattern")
    public Sr2680pk0checkBeforeDwnldPatternResponse executeSR2680PK0CheckBeforeDwnldPattern(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pGmtseq", required = false) String pgmtseq, @RequestParam(value = "pPrgid", required = false) String pprgid, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: SR2680PK0CheckBeforeDwnldPattern");
        Sr2680pk0checkBeforeDwnldPatternResponse _result = procedureService.executeSR2680PK0CheckBeforeDwnldPattern(pordnum, pgmtseq, pprgid);
        LOGGER.debug("got the result for named procedure: SR2680PK0CheckBeforeDwnldPattern, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procMK103PK0QRYORD_GetOrdgmtImage", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "procMK103PK0QRYORD_GetOrdgmtImage")
    public Downloadable executeProcMK103PK0QRYORD_GetOrdgmtImage(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pGmtseq", required = false) String pgmtseq, @RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procMK103PK0QRYORD_GetOrdgmtImage");
        InputStream _result = procedureService.executeProcMK103PK0QRYORD_GetOrdgmtImage(pprgid, pordnum, pgmtseq);
        LOGGER.debug("got the result for named procedure: procMK103PK0QRYORD_GetOrdgmtImage, result:{}", _result);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @RequestMapping(value = "/procedure/execute/procMK1100PK0_GetMkupAudit", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Mack up Audit")
    public ProcMk1100pk0GetMkupAuditResponse executeProcMK1100PK0_GetMkupAudit(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pDyejob", required = false) String pdyejob, @RequestParam(value = "pOpdateFrom", required = false) Date popdateFrom, @RequestParam(value = "pOpdateTo", required = false) Date popdateTo, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procMK1100PK0_GetMkupAudit");
        ProcMk1100pk0GetMkupAuditResponse _result = procedureService.executeProcMK1100PK0_GetMkupAudit(pprgid, pordnum, pdyejob, popdateFrom, popdateTo);
        LOGGER.debug("got the result for named procedure: procMK1100PK0_GetMkupAudit, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procMK1100PK0_MK560QryMkrejects", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Mkup rejects")
    public ProcMk1100pk0Mk560qryMkrejectsResponse executeProcMK1100PK0_MK560QryMkrejects(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pGmtseq", required = false) String pgmtseq, @RequestParam(value = "pClrseqg", required = false) Integer pclrseqg, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procMK1100PK0_MK560QryMkrejects");
        ProcMk1100pk0Mk560qryMkrejectsResponse _result = procedureService.executeProcMK1100PK0_MK560QryMkrejects(pprgid, pordnum, pgmtseq, pclrseqg);
        LOGGER.debug("got the result for named procedure: procMK1100PK0_MK560QryMkrejects, result:{}", _result);
        return _result;
    }

}